usage = {
[=[
===========================================================================
rx:                                                                        ]=],
[=[
    create  {flow_name}                                                    ]=],
[=[
    destroy {flow_name}                                                    ]=],
[=[
    set     {flow_name} [port=port_name,port_name_2,...] 
                        [pdf_name=value[/mask]]
                        [udf(offset,size)=value[/mask]]                    ]=],
[=[
    start   {flow_name}                                                    ]=],
[=[
    stop    {flow_name}                                                    ]=],
[=[
    snoop   {flow_name} {max=0~256}                                        ]=],
[=[
    dump    {flow_name}                                                    ]=],
[=[
    show    [flow_name]                                                    ]=],
[=[
    cnt     [flow_name] [clear]                                            ]=],
[=[
  note: 
    > flow_name could be specified as ".", alias of last valid flow_name
    > available pdf_name:
      dst_mac, src_mac, ether_type, 
      outer_tpid, outer_vlan_cfi, outer_vlan_pri, outer_vlan_id, 
      inner_tpid, inner_vlan_cfi, inner_vlan_pri, inner_vlan_id, 
      dst_ip, src_ip, l4_dst_port, l4_src_port, 
      ip_protocol, dscp, ttl, tcp_control, 
      dst_ip6, src_ip6, 
      ext_header_type, ext_header_sub_code, ip6_flow_label
===========================================================================]=]
}

local usage_idx = {
  ["create"]  = 2,
  ["destroy"] = 3,
  ["set"]     = 4,
  ["start"]   = 5,
  ["stop"]    = 6,
  ["snoop"]   = 7,
  ["dump"]    = 8,
  ["show"]    = 9,
  ["cnt"]     = 10
}

function print_usage (op)

  if nil~=op and nil~=usage_idx[op] then
    print(usage[usage_idx[op]])
  else
    for i=1, #usage do
      print(usage[i])
    end
  end
  
end


function check_result (result_code, result_info)
  if 0 ~= result_code then
    print(result_info)
    return false
  end
end

flow_name = nil
paras = nil

function get_flow_name ()
  local name = string.match(paras, " [%w_.]+ ")

  if nil == name then
    return nil
  end

  --print(name)

  name = string.gsub(name," ","")
  if "."==name and nil~=flow_name then
    paras = string.gsub(paras,"%.","",1)
    return flow_name
  elseif "." ~= name then
    flow_name = name
    paras = string.gsub(paras,name,"",1)
    return flow_name
  else
    return nil
  end
end

function paras_trim(t)
  for i=1, #t do
    paras = string.gsub(paras,t[i],"",1)
  end
end

function flow_set()

  --extract port
  local ports={}
  local port = string.match(paras, " port=([%w_/.,-]+) ")
  if nil ~= port then

    paras = string.gsub(paras, "port="..port, "", 1)
    port = string.gsub(port, "," ," ")

    local i = 1
    if nil ~= port then
      for p in string.gmatch(port, "([%w_/.-]+)") do
        ports[i]=p
        i=i+1
        --print(p)
      end
    end

    check_result(lua_c_rx_flow_set_port(flow_name, ports))
  end

  local t={}
  --extract udf
  for offset, size, val, mask in string.gmatch(paras, " udf%((%d+),(%d+)%)=([a-f%d:-]+)/([a-f%d:-]+) ") do
    t[#t+1] = "udf%("..offset..","..size.."%)="..val.."/"..mask
    check_result(lua_c_rx_flow_set_udf(flow_name,tonumber(offset),tonumber(size),val,mask))
  end

  paras_trim(t)
  t={}

  for offset, size, val in string.gmatch(paras, " udf%((%d+),(%d+)%)=([a-f%d:-]+) ") do
    t[#t+1] = "udf%("..offset..","..size.."%)="..val
    check_result(lua_c_rx_flow_set_udf_prefix(flow_name,tonumber(offset),tonumber(size),val,-1))
  end

  paras_trim(t)
  t={}

  --extract pdf
  for field, val, mask in string.gmatch(paras, " ([%w_.-]+)=([a-f%d:-]+)/([a-f%d:-]+) ") do
    t[#t+1] = field.."="..val.."/"..mask
    check_result(lua_c_rx_flow_set_pdf(flow_name,field,val,mask))
  end
  
  paras_trim(t)
  t={}
  
  for field, val in string.gmatch(paras, " ([%w_.-]+)=([a-f%d:-]+) ") do
    t[#t+1] = field.."="..val
    check_result(lua_c_rx_flow_set_pdf_prefix(flow_name,field,val,-1))
  end

  paras_trim(t)

end


function flow_show ()

  if nil == get_flow_name() then
    check_result(lua_c_rx_flow_show(""))
  else
    check_result(lua_c_rx_flow_show(flow_name))
  end
  
end

function flow_cnt ()

  local str = string.match(paras, " clear ")
  local clr = false
  if nil ~= str then
    paras = string.gsub(paras, " clear ", "", 1)
    clr = true
  end
  
  if nil == get_flow_name() then
    check_result(lua_c_rx_flow_cnt("", clr))
  else
    check_result(lua_c_rx_flow_cnt(flow_name, clr))
  end
  
end

function flow_snoop ()

  local max_cnt = string.match(paras, " max=(%d+) ")
  
  if nil==max_cnt then
    return 1
  else
    paras = string.gsub(paras, "max="..max_cnt, "", 1)
  end
  
  check_result(lua_c_rx_flow_snoop(flow_name, tonumber(max_cnt)))
  
end

--------------------main--------------------
function main (_paras)

  --print(_paras)
  
  paras = _paras

  if "" == paras then
    print_usage()
    return
  end

  --ensure enough space
  paras = string.gsub(paras," ","  ")
  paras = " " .. paras .. " "

  --extract op
  local op = string.match(paras, " (%a+) ")

  if nil == op then
    print_usage()
    return
  end

  paras = string.gsub(paras,op,"",1)

  --handle op of show
  if "show" == op then
    flow_show()
    return
  end

  if "cnt" == op then
    flow_cnt()
    return
  end
  
  --handle other op
  if nil == get_flow_name() then
    print_usage(op)
    return
  end

  local r
  if "create" == op then
    check_result(lua_c_rx_flow_create(flow_name))
  elseif "destroy" == op then
    check_result(lua_c_rx_flow_destroy(flow_name))
  elseif "set" == op then
    r = flow_set(paras)
  elseif "start" == op then
    check_result(lua_c_rx_flow_start(flow_name))
  elseif "stop" == op then
    check_result(lua_c_rx_flow_stop(flow_name))
  elseif "snoop" == op then
    r = flow_snoop()
  elseif "dump" == op then
    check_result(lua_c_rx_flow_dump(flow_name))
  else
    print_usage()
  end

  if string.match(paras, "^%s+")~=paras and ""~=paras then
    print("ignored string:",paras)
  end

end

